// -*- mode: c++; -*-

#define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE construction

#include <iostream>
#include <string>

using namespace std;

#include <reta/nfa.hpp>
#include <reta/dfa.hpp>
#include <reta/dot-graph.hpp>

#include <boost/format.hpp>
using fmt = boost::format;

#include <boost/test/unit_test.hpp>
namespace utf = boost::unit_test;

static const struct {
    string r, nfa, dfa;
} test_data [] = {
    { "a",
      "0 2 1 0 97 1 1 1 ",
      "0 1 1 0 97 1 1 1 " },
    { "(a)",
      "0 2 1 0 97 1 1 1 ",
      "0 1 1 0 97 1 1 1 " },
    { "(a*)",
      "0 4 5 0 97 1 1 -1 0 1 -1 3 2 -1 0 2 -1 3 1 3 ",
      "0 2 2 0 97 1 1 97 1 2 0 1 " },
    { "ab",
      "0 4 3 0 97 1 1 -1 2 2 98 3 1 3 ",
      "0 2 2 0 97 1 1 98 2 1 2 " },
    { "a|b",
      "0 6 6 0 97 1 1 -1 5 2 98 3 3 -1 5 4 -1 0 4 -1 2 1 5 ",
      "0 1 2 0 97 1 0 98 2 2 1 2 " },
    { "a*|b",
      "0 8 10 0 97 1 1 -1 0 1 -1 3 2 -1 0 2 -1 3 3 -1 7 4 98 5 5 -1 7 6 -1 2 6 "
      "-1 4 1 7 ",
      "0 2 3 0 97 1 0 98 2 1 97 1 3 0 1 2 " },
    { "a|b*",
      "0 8 10 0 97 1 1 -1 7 2 98 3 3 -1 2 3 -1 5 4 -1 2 4 -1 5 5 -1 7 6 -1 0 6 "
      "-1 4 1 7 ",
      "0 2 3 0 97 1 0 98 2 1 98 2 3 0 1 2 " },
    { "(a)|b*",
      "0 8 10 0 97 1 1 -1 7 2 98 3 3 -1 2 3 -1 5 4 -1 2 4 -1 5 5 -1 7 6 -1 0 6 "
      "-1 4 1 7 ",
      "0 2 3 0 97 1 0 98 2 1 98 2 3 0 1 2 " },
    { "(a|b)*",
      "0 8 10 0 97 1 1 -1 5 2 98 3 3 -1 5 4 -1 0 4 -1 2 5 -1 4 5 -1 7 6 -1 4 6 "
      "-1 7 1 7 ",
      "0 3 6 0 97 1 0 98 2 1 97 1 1 98 2 2 97 1 2 98 2 3 0 1 2 " },
    { "a|(b)*",
      "0 8 10 0 97 1 1 -1 7 2 98 3 3 -1 2 3 -1 5 4 -1 2 4 -1 5 5 -1 7 6 -1 0 6 "
      "-1 4 1 7 ",
      "0 2 3 0 97 1 0 98 2 1 98 2 3 0 1 2 " },
    { "(a)|c",
      "0 6 6 0 97 1 1 -1 5 2 99 3 3 -1 5 4 -1 0 4 -1 2 1 5 ",
      "0 1 2 0 97 1 0 99 2 2 1 2 " },
    { "(a*)|c",
      "0 8 10 0 97 1 1 -1 0 1 -1 3 2 -1 0 2 -1 3 3 -1 7 4 99 5 5 -1 7 6 -1 2 6 "
      "-1 4 1 7 ",
      "0 2 3 0 97 1 0 99 2 1 97 1 3 0 1 2 " },
    { "ab|c",
      "0 8 8 0 97 1 1 -1 2 2 98 3 3 -1 7 4 99 5 5 -1 7 6 -1 0 6 -1 4 1 7 ",
      "0 2 3 0 97 1 0 99 2 1 98 3 2 2 3 " },
    { "a|b|c",
      "0 10 11 0 97 1 1 -1 9 2 98 3 3 -1 7 4 99 5 5 -1 7 6 -1 2 6 -1 4 7 -1 9 8 "
      "-1 0 8 -1 6 1 9 ",
      "0 1 3 0 97 1 0 98 2 0 99 3 3 1 2 3 " },
    { "a*|b|c",
      "0 12 15 0 97 1 1 -1 0 1 -1 3 2 -1 0 2 -1 3 3 -1 11 4 98 5 5 -1 9 6 99 7 7 "
      "-1 9 8 -1 4 8 -1 6 9 -1 11 10 -1 2 10 -1 8 1 11 ",
      "0 2 4 0 97 1 0 98 2 0 99 3 1 97 1 4 0 1 2 3 " },
    { "a|b*|c",
      "0 12 15 0 97 1 1 -1 11 2 98 3 3 -1 2 3 -1 5 4 -1 2 4 -1 5 5 -1 9 6 99 7 7 "
      "-1 9 8 -1 4 8 -1 6 9 -1 11 10 -1 0 10 -1 8 1 11 ",
      "0 2 4 0 97 1 0 98 2 0 99 3 1 98 2 4 0 1 2 3 " },
    { "(a)|b*|c",
      "0 12 15 0 97 1 1 -1 11 2 98 3 3 -1 2 3 -1 5 4 -1 2 4 -1 5 5 -1 9 6 99 7 7 "
      "-1 9 8 -1 4 8 -1 6 9 -1 11 10 -1 0 10 -1 8 1 11 ",
      "0 2 4 0 97 1 0 98 2 0 99 3 1 98 2 4 0 1 2 3 " },
    { "(a|b)*|c",
      "0 12 15 0 97 1 1 -1 5 2 98 3 3 -1 5 4 -1 0 4 -1 2 5 -1 4 5 -1 7 6 -1 4 6 "
      "-1 7 7 -1 11 8 99 9 9 -1 11 10 -1 6 10 -1 8 1 11 ",
      "0 3 7 0 97 1 0 98 2 0 99 3 1 97 1 1 98 2 2 97 1 2 98 2 4 0 1 2 3 " },
    { "a|(b)*|c",
      "0 12 15 0 97 1 1 -1 11 2 98 3 3 -1 2 3 -1 5 4 -1 2 4 -1 5 5 -1 9 6 99 7 7 "
      "-1 9 8 -1 4 8 -1 6 9 -1 11 10 -1 0 10 -1 8 1 11 ",
      "0 2 4 0 97 1 0 98 2 0 99 3 1 98 2 4 0 1 2 3 " }
};

BOOST_AUTO_TEST_SUITE(construction)

BOOST_AUTO_TEST_CASE (construction_from_regex) {
    for (const auto& t : test_data) {
        BOOST_TEST_MESSAGE (fmt ("testing : %1%") % t.r);

        const auto s = postfix (t.r);

        const auto nfa = make_nfa (s);

        {
            stringstream ss;
            ss << nfa;

            BOOST_TEST (ss.str () == t.nfa);
        }

        const auto dfa = make_dfa (nfa);

        {
            stringstream ss;
            ss << dfa;

            BOOST_TEST (ss.str () == t.dfa);
        }
    }
}

BOOST_AUTO_TEST_SUITE_END()
